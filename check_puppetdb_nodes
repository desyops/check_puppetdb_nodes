#!/usr/bin/perl

# Copyright (c) 2014, Evgeni Golov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# * Neither the name of the {organization} nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use JSON;
use LWP;
use Nagios::Plugin;
use Date::Parse;

my $np = Nagios::Plugin->new(
    usage => "Usage: %s [ -H|--hostname=<hostname>] "
      . "[ -n|--node=<node> ] "
      . "[ -p|--port=<port> ] [-s] [ -w|--warning=<minutes> ] "
      . "[ -c|--critical=<minutes> ] [ -W|--warnfails=<num> ] "
      . "[ -C|--critfails=<num> ]",
    shortname => 'Check last node runs from PuppetDB',
    url       => 'https://github.com/evgeni/check_puppetdb_nodes',
    version   => '0.1',
    license   => 'This plugin is free software, and comes with ABSOLUTELY
NO WARRANTY. It may be used, redistributed and/or modified under
the terms of the BSD 3-clause license.',
);

$np->add_arg(
    spec => 'warning|w=i',
    help => "Exit with WARNING status if nodes did not update for "
      . "more than INTEGER minutes (default: %s)",
    default => 120,
);

$np->add_arg(
    spec => 'critical|c=i',
    help => "Exit with CRITICAL status if nodes did not update for "
      . "more than INTEGER minutes (default: %s)",
    default => 1440,
);

$np->add_arg(
    spec => 'warnfails|W=i',
    help => "Exit with WARNING status if nodes had at least INTEGER "
      . "failures in the last run (default: %s)",
    default => 1,
);

$np->add_arg(
    spec => 'critfails|C=i',
    help => "Exit with CRITICAL status if nodes had at least INTEGER "
      . "failures in the last run (default: %s)",
    default => 1,
);

$np->add_arg(
    spec    => 'hostname|H=s',
    help    => 'Hostname of the PuppetDB (default: %s)',
    default => 'localhost',
);

$np->add_arg(
    spec    => 'port|p=i',
    help    => 'Port PuppetDB is running on (default: %s)',
    default => 8080,
);

$np->add_arg(
    spec    => 'node|n=s',
    help    => 'Node name to check',
    default => 'localhost',
);

$np->add_arg(
    spec => 'ssl|s',
    help => "Use HTTPS instead of HTTP",
);

$np->getopts;

my $url = sprintf( 'http%s://%s:%d/',
    defined( $np->opts->ssl ) ? 's' : '',
    $np->opts->hostname, $np->opts->port );

my $nodename = $np->opts->node;

my $ua = new LWP::UserAgent;
$ua->default_header( 'Accept' => 'application/json' );

my $response = $ua->get( $url . "v3/nodes/$nodename" );

if ( !$response->is_success ) {
    $np->nagios_exit( 'UNKNOWN',
        $response->code . ": " . $response->status_line );
}

my $node = decode_json( $response->decoded_content );

my $now = time();

my $name              = $node->{'name'};
my $deactivated       = $node->{'deactivated'};
my $catalog_timestamp = $node->{'catalog_timestamp'};
my $ts                = str2time($catalog_timestamp);
if ( !defined $deactivated ) {
    my $delta = ( $now - $ts );
    if ( $delta > ( $np->opts->critical * 60 ) ) {
        $np->add_message( CRITICAL,
            "$name did not update since $catalog_timestamp\n" );
    }
    elsif ( $delta > ( $np->opts->warning * 60 ) ) {
        $np->add_message( WARNING,
            "$name did not update since $catalog_timestamp\n" );
    }

    my %parameters = (
        'query' => '["and",["=","certname","'
          . $node->{'name'}
          . '"],["=","latest-report?",true]]',
        'summarize-by' => 'certname',
        'count-by'     => 'resource',
    );
    my $uri = URI->new( $url . 'v3/event-counts' );
    $uri->query_form(%parameters);
    $response = $ua->get($uri);

    if ( $response->is_success ) {
        my $node_data = decode_json( $response->decoded_content );

        my $failures = 0;
        if (    defined( @$node_data[0] )
            and defined( @$node_data[0]->{'failures'} ) )
        {
            $failures = @$node_data[0]->{'failures'};
        }

        if ( $failures >= $np->opts->critfails ) {
            $np->add_message( CRITICAL,
                "$name had $failures failures in the last run\n" );
        }
        elsif ( $failures >= $np->opts->warnfails ) {
            $np->add_message( WARNING,
                "$name had $failures failures in the last run\n" );
        }
    }

}

my $code;
my $message;
( $code, $message ) = $np->check_messages;

$np->nagios_exit( $code, $message );
